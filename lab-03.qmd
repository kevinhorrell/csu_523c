---
title: 'Lab 3: Tesselations, Point in Polygon'
subtitle: 'National Dam Inventory'
author:
  - name: Kevin Horrell
    email: kevin.horrell@colostate.edu
format: html

knitr:
  opts_chunk:
    eval: true
    echo: true
    out.width: "100%"
    warning: false
    message: false
    error: false
---

```{r, include = F}
knitr::opts_chunk$set(comment = "", 
                      cache = FALSE, 
                      fig.retina = 3)
```

# Background

In this lab we will an explore the impacts of tessellated surfaces and the modifiable areal unit problem (MAUP) using the National Dam Inventory maintained by the United States Army Corps of Engineers. Doing this will require repetitive tasks that we will write as functions and careful consideration of feature aggregation/simplification, spatial joins, and data visualization. The end goal is to visualize the distribution of dams and there purposes across the country.

**DISCLAIMER:** This lab will be crunching a TON of data, in some cases 562,590,604 values for a single process! Therefore, I encourage you to run your code chuck-by-chunk rather then regularly knitting. Your final knit may take a couple of minutes to process. I know this is painful but be proud that, all said, your report will be analyzing billions of meaningful data and geometric relations.

****
This Lab covers 4 main skills:

1. **Tessellating Sufaces** to discritized space
2. **Geometry Simplification**: to expedite expensive intersections
3. **Writing Functions** to expedite repetitious reporting and mapping tasks
4. **Point-in-Polygon** counts to aggregate point data
****

# Libraries

```{r}
#Data Manipulation
library(tidyverse)
library(sf)
library(units)
library(flextable)
library(rmapshaper)

#Data Loading
library(USAboundaries)
library(USAboundariesData)
library(rnaturalearth)
remotes::install_github('mikejohnson51/AOI')
library(AOI)

# Visualization
library(gghighlight)
library(ggrepel)
library(knitr)
```

****
# Question 1:
Here we will prepare five tessellated surfaces from CONUS and write a function to plot them in a descriptive way.

## Step _1.1_
First, we need a spatial file of CONUS counties. For future area calculations we want these in an equal area projection (EPSG:5070).

To achieve this:
* get an sf object of US counties (AOI::aoi_get(state = "conus", county = "all"))
* transform the data to EPSG:5070

```{r}
counties <- AOI::aoi_get(state = "conus", county = "all") %>%
  st_transform(crs = 5070)
```

```{r, eval = F}
ggplot(data = counties) +
  geom_sf()
```



## Step 1.2

For triangle based tessellations we need point locations to serve as our ‚Äúanchors‚Äù.

To achieve this:
1. generate county centroids using st_centroid
2. Since, we can only tessellate over a feature we need to combine or union the resulting 3,108 POINT features into a single MULTIPOINT feature
3. Since these are point objects, the difference between union/combine is mute

```{r}
counties_cent <- counties %>%
  st_centroid() %>%
  st_union()
```


Step 1.3

Tessellations/Coverage‚Äôs describe the extent of a region with geometric shapes, called tiles, with no overlaps or gaps.

Tiles can range in size, shape, area and have different methods for being created.

Some methods generate triangular tiles across a set of defined points (e.g. voroni and delauny triangulation)

Others generate equal area tiles over a known extent (st_make_grid)

For this lab, we will create surfaces of CONUS using using 4 methods, 2 based on an extent and 2 based on point anchors:

Tessellations :
1. st_voronoi: creates voroni tessellation
2. st_triangulate: triangulates set of points (not constrained)

Coverage‚Äôs:
- st_make_grid: Creates a square grid covering the geometry of an sf or sfc object
- st_make_grid(square = FALSE): Create a hexagonal grid covering the geometry of an sf or sfc object
- The side of coverage tiles can be defined by a cell resolution or a specified number of cell in the X and Y direction

For this step:
1. Make a voroni tessellation over your county centroids (MULTIPOINT)
2. Make a triangulated tessellation over your county centroids (MULTIPOINT)
3. Make a gridded coverage with n = 70, over your counties object
4. Make a hexagonal coverage with n = 70, over your counties object

In addition to creating these 4 coverage‚Äôs we need to add an ID to each tile.

To do this:
- add a new column to each tessellation that spans from 1:n().
- Remember that ALL tessellation methods return an sfc GEOMETRYCOLLECTION, and to add attribute information - like our ID - you will have to coerce the sfc list into an sf object (st_sf or st_as_sf)

Last, we want to ensure that our surfaces are topologically valid/simple.
- To ensure this, we can pass our surfaces through st_cast.
- Remember that casting an object explicitly (e.g. st_cast(x, "POINT")) changes a geometry
- If no output type is specified (e.g. st_cast(x)) then the cast attempts to simplify the geometry.
- If you don‚Äôt do this you might get unexpected ‚ÄúTopologyException‚Äù errors.

#Tesselations
```{r}
vor_counties <- counties_cent %>%
  st_voronoi() %>%
  st_cast() %>%
  st_as_sf() %>%
  mutate(id = 1:n())

tri_counties <- counties_cent %>%
  st_triangulate() %>%
  st_cast() %>%
  st_as_sf() %>%
  mutate(id = 1:n())

sqgrid_counties <- counties_cent %>%
  st_make_grid(n = 70) %>%
  st_as_sf() %>%
  mutate(id = 1:n())
  
hexgrid_counties <- counties_cent %>%
  st_make_grid(square = FALSE, n = 70) %>%
  st_as_sf() %>%
  mutate(id = 1:n())
```

```{r, echo = FALSE, eval = FALSE}
ggplot(data = hexgrid_counties) +
  geom_sf() +
  theme_void()
```


Step 1.4

If you plot the above tessellations you‚Äôll see the triangulated surfaces produce regions far beyond the boundaries of CONUS.

We need to cut these boundaries to CONUS border.

To do this, we will call on st_intersection, but will first need a geometry of CONUS to serve as our differencing feature. We can get this by unioning our existing county boundaries.

```{r}
u_counties <- counties %>%
  st_union()
```


Step 1.5

With a single feature boundary, we must carefully consider the complexity of the geometry. Remember, the more points our geometry contains, the more computations needed for spatial predicates our differencing. For a task like ours, we do not need a finely resolved coastal boarder.

To achieve this:
- Simplify your unioned border using the Visvalingam algorithm provided by rmapshaper::ms_simplify.
- Choose what percentage of vertices to retain using the keep argument and work to find the highest number that provides a shape you are comfortable with for the analysis:
- Once you are happy with your simplification, use the mapview::npts function to report the number of points in your original object, and the number of points in your simplified object
- How many points were you able to remove? What are the consequences of doing this computationally?
- Finally, use your simplified object to crop the two triangulated tessellations with st_intersection:

```{r}
simp_counties <- u_counties %>%
  ms_simplify(keep = 0.01)

ggplot() +
  geom_sf(data=simp_counties) +
  geom_sf(data = u_counties) +
  theme_void()

mapview::npts(u_counties, by_feature = FALSE)
#11292
mapview::npts(simp_counties, by_feature = FALSE)
#114

vor_conus <- st_intersection(simp_counties, vor_counties)

tri_conus <- st_intersection(simp_counties, tri_counties)

sq_conus <- st_intersection(simp_counties, sqgrid_counties)

hex_conus <- st_intersection(simp_counties, hexgrid_counties)
```


Step 1.6

The last step is to plot your tessellations. We don‚Äôt want to write out 5 ggplots (or mindlessly copy and paste üòÑ)

Instead, lets make a function that takes an sf object as arg1 and a character string as arg2 and returns a ggplot object showing arg1 titled with arg2.

The form of a function is:

name = function(arg1, arg2) {
  
  ... code goes here ...
  
}

For this function:
The name can be anything you choose, arg1 should take an sf object, and arg2 should take a character string that will title the plot

In your function, the code should follow our standard ggplot practice where your data is arg1, and your title is arg2

The function should also enforce the following:

    a white fill
    a navy border
    a size of 0.2
    `theme_void``
    a caption that reports the number of features in arg1
    You will need to paste character strings and variables together.

```{r}
tessplot <- function(obj, char){
  
  ggplot(data = obj) +
    geom_sf(fill = 'white', color = 'navy', size = 0.2) +
    labs(title = char,
         caption = paste('Number of points: ', mapview::npts(obj))) +
    theme_void()

}
```


Step 1.7

Use your new function to plot each of your tessellated surfaces and the original county data (5 plots in total):
```{r}
tessplot(counties, char = 'CONUS Counties')
tessplot(vor_conus, char = 'Voronoi Tesselation of CONUS Counties')
tessplot(tri_conus, char = 'Triangulated Tesselation of CONUS Counties')
tessplot(sq_conus, char = 'Square Coverage of CONUS Counties')
tessplot(hex_conus, char = 'Hex Coverage of CONUS Counties')
```

