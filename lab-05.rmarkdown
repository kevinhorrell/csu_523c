---
title: 'Lab 5: Machine Learning in Hydrology'
subtitle: 'Tidymodels & CAMELS Data'
author:
  - name: Kevin Horrell
    email: kevin.horrell@colostate.edu
format: html

knitr:
  opts_chunk:
    eval: true
    echo: true
    out.width: "100%"
    warning: false
    message: false
    error: false
---

```{r, include = F}
knitr::opts_chunk$set(comment = "", 
                      cache = FALSE, 
                      fig.retina = 3)
```



# Libraries



```{r}
#Data Manipulation
library(tidyverse)
library(tidymodels)
library(dataRetrieval)
library(AOI)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(ranger)

#Data Visualization
library(ggpubr)
library(gghighlight)
library(ggrepel)
library(ggthemes)
```


# Introduction

In this lab, we will explore predictive modeling in hydrology using the tidymodels framework and the CAMELS (Catchment Attributes and Meteorology for Large-sample Studies) dataset.

# What is tidymodels?

tidymodels is an R framework designed for machine learning and statistical modeling. Built on the principles of the tidyverse, tidymodels provides a consistent and modular approach to tasks like data preprocessing, model training, evaluation, and validation. By leveraging the strengths of packages such as recipes, parsnip, and yardstick, tidymodels streamlines the modeling workflow, making it easier to experiment with different models while maintaining reproducibility and interpretability.

# What is the CAMELS dataset?

The CAMELS dataset is a widely used resource in hydrology and environmental science, providing data on over 500 self-draining river basins across the United States. It includes meteorological forcings, streamflow observations, and catchment attributes such as land cover, topography, and soil properties. This dataset is particularly valuable for large-sample hydrology studies, enabling researchers to develop and test models across diverse climatic and physiographic conditions.

In this lab, we will focus on predicting mean streamflow for these basins using their associated characteristics. CAMELS has been instrumental in various hydrologic and machine learning applications, including:

  - Calibrating Hydrologic Models – Used for parameter tuning in models like SAC-SMA, VIC, and HBV, improving regional and large-sample studies.

  - Training Machine Learning Models – Supports deep learning (e.g., LSTMs) and regression-based streamflow predictions, often outperforming traditional methods.

  - Understanding Model Behavior – Assists in assessing model generalization, uncertainty analysis, and the role of catchment attributes.

  - Benchmarking & Regionalization – Facilitates large-scale model comparisons and parameter transfer to ungauged basins.

  - Hybrid Modeling – Enhances physics-based models with machine learning for bias correction and improved hydrologic simulations.

A notable study by Kratzert et al. (2019) demonstrated that LSTMs can outperform conceptual models in streamflow prediction. As part of this lab, we will explore how to programmatically download and load the data into R.

# What's in the data?

Each record in the CAMELS dataset represents a unique river basin, identified by an outlet USGS NWIS gauge_id. The dataset contains a mix of continuous and categorical variables, including meteorological, catchment, and streamflow summaries.

The data we are going to downloaded are the basin level summaries. For example, if we looked at row 1 of the data (Gage: 01013500) all of the values are the areal average for the drainage basin seen below, while the flow metrics are associated with the outlet gage (in red):



```{r}
# Use the `findNLDI` function to get the basin and flowlines for the first gauge
basin <- findNLDI(nwis = "01013500",
                  nav = "UT",
                  find = c("basin", "flowlines"))

# Plot the basin, flowlines, and gauge ...
ggplot() + 
  geom_sf(data = basin$basin, fill = "lightblue") + 
  geom_sf(data = basin$UT_flowlines, color = "blue") + 
  geom_sf(data = basin$origin, color = "red") + 
  theme_minimal()
```



# Lab Goals
****

In this lab, you will:

  - Learn how to programmatically download and access data.
  - Practice using tidymodels for predictive modeling.
  - Train and evaluate models to predict mean stream flow across the country.
  - Interpret and compare model performance using workflows.

By the end of this lab, you will have hands-on experience applying machine learning techniques to real-world data, helping to bridge the gap between statistical modeling and environmental science.

****

# Data Download

The CAMELS dataset is hosted by NCAR and can be accessed here under the “Individual Files” section. The root URL for all data seen on the “Individual Files” page is:



```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
```



Near the bottom of that page, there are many .txt files that contain the data we want. Some hold climate data for each basin, some hold geology data, some hold soil data, etc. There is also a PDF with descriptions of the columns in each file. We are going to download all of the .txt files and the PDF.

# Getting the documentation PDF

We can download the documentation PDF which provides a descriptions for the various columns as many are not self-explanatory. Here we can use download.file to download the PDF to our data directory.


```{r, eval = FALSE}
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 'C:/Users/horre/Desktop/csu_523c/data05/camels_attributes_v2.0.pdf', overwrite = TRUE)
#this function produced a corrupt file, so I downloaded it manually.
```



# Getting Basin characteristics

Now we want to download the .txt files that store the actual data documented in the PDF. Doing this file by file (like we did with the PDF) is possible, but lets look at a better/easier way…

  a. Let's create a vector storing the data types/file names we want to download:


```{r}
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
```


  
  b. Using glue, we can construct the needed URLs and file names for the data we want to download:


```{r}
# Where the files live online ...
remote_files <- glue('{root}/camels_{types}.txt')
# where we want to download the data ...
local_files <- glue('data05/camels_{types}.txt')
```


  
  c. Now we can download the data: walk2 comes from the purrr package and is used to apply a function to multiple arguments in parallel (much like map2 works over paired lists). Here, we are asking walk2 to pass the first element of remote_files and the first element of local_files to the download.file function to download the data, and setting quiet = TRUE to suppress output. The process is then iterated for the second element of each vector, and so on.


```{r}
walk2(remote_files, local_files, download.file, quiet = TRUE)
```



  d. Once downloaded, the data can be read it into R using readr::read_delim(), again instead of applying this to each file individually, we can use map to apply the function to each element of the local_files list.


```{r}
# Read and merge data
camels <- map(local_files, read_delim, show_col_types = FALSE)
```


  
  e. This gives us a list of data.frames, one for each file that we want to merge into a single table. So far in class we have focused on *_join functions to merge data based on a primary and foreign key relationship.

In this current list, we have >2 tables, but, have a shared column called gauge_id that we can use to merge the data. However, since we have more then a left and right hand table, we need a more robust tool. We will use the powerjoin package to merge the data into a single data frame. powerjoin is a flexible package for joining lists of data.frames. It provides a wide range of join types, including inner, left, right, full, semi, anti, and cross joins making it a versatile tool for data manipulation and analysis, and one that should feel familiar to users of dplyr.

In this case, we are join to merge every data.frame in the list (n = 6) by the shared gauge_id column. Since we want to keep all data, we want a full join.


```{r}
camels <- power_full_join(camels, by = 'gauge_id')
```



****
# Question 1
## _Your Turn_
  * Make sure all data and the PDF are downloaded into your data directory
  * From the documentation PDF, report what _zero_q_freq_ represents

*zero_q_freq* is the frequency or how often there is no flow, q = 0 mm/day
  
## Exploratory Data Analysis
First, lets make a map of the sites. Use the borders() ggplot function to add state boundaries to the map and initially color the points by the mean flow (q_mean) at each site.


```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```




# Question 2
## _Your Turn_
  * Make 2 maps of the sites, coloring the points by the aridity and p_mean column
  * Add clear labels, titles, and a color scale that makes sense for each parameter.
  * Ensure these render as a single image with your choice of facet_*, patchwork, or ggpubr



```{r}
aridity <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = aridity), size = 2) +
  scale_color_gradient(low = "#012b90", high = "#d21404") +
  ggthemes::theme_map() +
  labs(title = 'Aridity for NWIS Gauges',
       subtitle = '(PET/P)',
       color = 'Aridity Index') +
  theme(legend.position = 'right')

p_mean <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean), size = 2) +
  scale_color_gradient(low = "#DBCA69", high = "#1E4192") +
  ggthemes::theme_map() +
  labs(title = 'Mean Precipitaion at NWIS Gauges',
       subtitle = '(mm/day)',
       color = 'Mean Precip.') +
  theme(legend.position = 'right')

ggarrange(aridity, p_mean,
          ncol = 1, nrow = 2,
          common.legend = FALSE)
```




## Model Preparation

As an initial analysis, lets look at the relationship between aridity, rainfall and mean flow. First, lets check the correlation between these three variables. Drop NAs and only view the 3 columns of interest.




```{r}
camels_cor <- camels %>%
  select(aridity, p_mean, q_mean) %>% 
  drop_na() %>% 
  cor()
```


As expected, there is a strong correlation between rainfall and mean flow, and an inverse correlation between aridity and rainfall. While both are high, we are going see if we can build a model to predict mean flow using aridity and rainfall.

## Visual EDA

  a. Lets start by looking that the 3 dimensions (variables) of this data. We’ll start with a XY plot of aridity and rainfall. We are going to use the scale_color_viridis_c() function to color the points by the q_mean column. This scale functions maps the color of the points to the values in the q_mean column along the viridis continuous (c) palette. Because a scale_color_* function is applied, it maps to the known color aesthetic in the plot.



```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  scale_color_viridis_c() +
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall (mm/day)",
       color = "Mean Flow (mm/day)") +
  ylim(0, 10)
```



Ok! so it looks like there is a relationship between rainfall, aridity, and runoff but it looks like an exponential decay function and is certainly not linear.

To test a transformation, we can log transform the x and y axes using the scale_x_log10() and scale_y_log10() functions:



```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow (mm/day)")
```



Great! We can see a log-log relationship between aridity and rainfall provides a more linear relationship. This is a common relationship in hydrology and is often used to estimate rainfall in ungauged basins. However, once the data is transformed, the lack of spread in the streamflow data is quite evident with high mean flow values being compressed to the low end of aridity/high end of rainfall.

To address this, we can visualize how a log transform may benifit the q_mean data as well. Since the data is represented by color, rather then an axis, we can use the trans (transform) argument in the scale_color_viridis_c() function to log transform the color scale.



```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```



Excellent! Treating these three right skewed variables as log transformed, we can see a more evenly spread relationship between aridity, rainfall, and mean flow. This is a good sign for building a model to predict mean flow using aridity and rainfall.
****

# Model Building

## Lets start by splitting the data
****
First, we set a seed for reproduceabilty, then transform the q_mean column to a log scale. Remember it is error prone to apply transformations to the outcome variable within a recipe, so, we’ll do it a priori.

Once set, we can split the data into a training and testing set. We are going to use 80% of the data for training and 20% for testing with no stratification.

Additionally, we are going to create a 10-fold cross validation dataset to help us evaluate multi-model setups.



```{r}
set.seed(9257)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels_mod <- camels %>% 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels_mod, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10) #cv = cross-validation, v = # folds
```




## Preprocessor: recipe

In lecture, we have focused on using formulas as a workflow pre-processor. Separately we have used the recipe function to define a series of data pre-processing steps. Here, we are going to use the recipe function to define a series of data pre-processing steps.

We learned quite a lot about the data in the visual EDA. We know that the q_mean, aridity and p_mean columns are right skewed and can be helped by log transformations. We also know that the relationship between aridity and p_mean is non-linear and can be helped by adding an interaction term to the model. To implement these, lets build a recipe!



```{r}
# Create a recipe to preprocess the data
rec <- recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) %>%
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())
```



## Naive base lm approach:

Ok, to start, lets do what we are comfortable with … fitting a linear model to the data. First, we use prep and bake on the training data to apply the recipe. Then, we fit a linear model to the data.


```{r}
# Prepare the data
baked_data <- prep(rec, camels_train) %>%
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)

# Sanity Interaction term from recipe ... these should be equal!!
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
# They are EQUAL.
```



## Where things get a little messy...

Ok so now we have our trained model lm_base and want to validate it on the test data.

    Remember a model's ability to predict on new data is the most important part of the modeling process. It really doesnt matter how well it does on data it has already seen!

We have to be careful about how we do this with the base R approach:
**INCORRECT PREDICTIONS**


```{r}
nrow(camels_test)
nrow(camels_train)
broom::augment(lm_base, data = camels_test)

camels_test$p2 = predict(lm_base, newdata = camels_test)
#View Data
ggplot(camels_test, aes(x = p2, y = logQmean)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = TRUE, size =1) +
  geom_abline(color = "red", size = 1) + 
  labs(title = "Linear Model Using `predict()`",
       x = "Predicted Log Mean Flow",
       y = "Observed Log Mean Flow") + 
  theme_linedraw()
```



## Correct version: prep -> bake -> predict
****

To correctly evaluate the model on the test data, we need to apply the same pre-processing steps to the test data that we applied to the training data. We can do this using the prep and bake functions with the recipe object. This ensures the test data is transformed in the same way as the training data before making predictions.



```{r}
test_data <- bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```



## Model Evaluation: statistical and visual
****
Now that we have the predicted values, we can evaluate the model using the *metrics* function from the yardstick package. This function calculates common regression metrics such as RMSE, R-squared, and MAE between the observed and predicted values.



```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```

```{r}
mod1 <- ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  # Apply a gradient color scale
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Base Model",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```


So that was a bit burdensome, is really error prone (fragile), and is worthless if we wanted to test a different algorithm… lets look at a better approach!

## Using a workflow instead
****

*tidymodels* provides a framework for building and evaluating models using a consistent and modular workflow. The workflows package allows you to define a series of modeling steps, including data pre-processing, model fitting in a single object. This makes it easier to experiment with different models, compare performance, and ensure reproducibility.

workflows are built from a model, a pre-processor, and an execution. Here, we are going to use the _linear_reg_ function to define a linear regression model, set the engine to lm, and the mode to regression. We then add our recipe to the workflow, fit the model to the training data, and extract the model coefficients.



```{r}
# Define model
lm_model <- linear_reg() %>%
  # define the engine
  set_engine("lm") %>%
  # define the mode
  set_mode("regression")

# Instantiate a workflow ...
lm_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(lm_model) %>%
  # Fit the model to the training data
  fit(data = camels_train) 

# Extract the model coefficients from the workflow
summary(extract_fit_engine(lm_wf))$coefficients
```



Lets ensure we replicated the results from the lm_base model. How do they look to you? _They are the same, so the models are the same._


```{r}
# From the base implementation
summary(lm_base)$coefficients
```



## Making Predictions
****
Now that lm_wf is a workflow, data is not embedded in the model, we can use augment with the new_data argument to make predictions on the test data.


```{r}
#
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```



## Model Evaluation: statistical vs. visual
****
As with EDA, applying for graphical and statistical evaluation of the model is a key Here, we use the metrics function to extract the default metrics (rmse, rsq, mae) between the observed and predicted mean stream flow values.

We then create a scatter plot of the observed vs predicted values, colored by aridity, to visualize the model performance.



```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```

```{r}
mod2 <- ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline() +
  theme_linedraw() +
  labs(title = "Linear Model: Workflow",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

ggarrange(mod1, mod2,
          ncol = 2,
          nrow = 1,
          common.legend = FALSE)
```


**There are differences in the two plots because the Aridity scale is different. Why is it different in workflows vs. the base lm model approach?**


## Switch it up!
****
The real power of this approach is that we can easily switch out the models/recipes and see how it performs. Here, we are going to instead use a random forest model to predict mean stream flow. We define a random forest model using the rand_forest function, set the engine to ranger, and the mode to regression. We then add the recipe, fit the model, and evaluate the skill.



```{r}
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(rf_model) %>%
  # Fit the model
  fit(data = camels_train) 
```



## Predictions
****
  - Make predictions on the test data using the augment function and the new_data argument.



```{r}
rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)
```



## Model Evaluation: statistical and visual
****
Evaluate the model using the metrics function and create a scatter plot of the observed vs predicted values, colored by aridity.



```{r}
metrics(rf_data, truth = logQmean, estimate = .pred)
```

```{r}
mod3 <- ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline() +
  theme_linedraw() +
  labs(title = "Random Forest Model: Workflow",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

ggarrange(mod1, mod2, mod3,
          ncol = 3,
          nrow = 1,
          common.legend = FALSE)
```



Awesome! We just set up a completely new model and were able to utilize all of the things we had done for the linear model. This is the power of the *tidymodels* framework!

That said, we still can reduce some to the repetition. Further, we are not really able to compare these models to one another.

## A workflowset approach
****

_workflow_set_ is a powerful tool for comparing multiple models on the same data. It allows you to define a set of workflows, fit them to the same data, and evaluate their performance using a common metric. Here, we are going to create a workflow_set object with the linear regression and random forest models, fit them to the training data, and compare their performance using the _autoplot_ and _rank_results_ functions.



```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```

```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```



Overall it seems the random forest model is outperforming the linear model. This is not surprising given the non-linear relationship between the predictors and the outcome :)

# Final Model
****


```{r}
rf_fin <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

final <- workflow() %>%
  add_recipe(rec) %>% 
  add_model(rf_fin) %>% 
  fit(data = camels_train)
```



## Evaluation
****
As a last step, lets evaluate the Random Forest model’s performance in predicting stream flow using the vip, augment, and ggplot2. We’ll start by computing variable importance (vip::vip()) to understand which predictors most influence the model.

Next, we’ll apply the trained model (final) to the test data set using augment to append predictions to the test data.

Model performance is then assessed using metrics(), comparing the actual (logQmean) and predicted (.pred) log-transformed mean stream flow values.

Finally, a scatter plot is generated, visualizing the observed vs. predicted values, color-coded by aridity. The plot includes a 1:1 reference line (geom_abline()) to indicate perfect predictions and uses the viridis color scale to improve readability.



```{r}
# VIP
vip::vip(final)
```


**p_mean is the most important variable in predicting mean streamflow. This makes sense because streams are driven by precipitation (and groundwater).**



```{r}
## Prediction
rf_data <- augment(final, new_data = camels_test)

## Evaluation
metrics(rf_data, truth = logQmean, estimate = .pred)
```

```{r}
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  geom_smooth(method = "lm", col = 'red', lty = 2, se = FALSE) +
  theme_linedraw() + 
  labs(title = "Random Forest Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```




# Question 3: Your Turn
****

  - Build a xgboost (engine) regression (mode) model using boost_tree
  - Build a neural network model using the nnet engine from the baguette package using the bag_mlp function
  - Add this to the above workflow
  - Evaluate the model and compare it to the linear and random forest models
  - Which of the 4 models would you move forward with?

# Question 4: Build Your Own
****
Borrowing from the workflow presented above, build your own complete ML pipeline to predict mean streamflow using the CAMELS dataset. You can experiment with different predictors and preprocessing steps to see how they impact model performance. A successful model will have a R-squared value > 0.9. To get started, you can use the following steps as a template:


a. Data Spliting (15)

    Set a seed for reproducible
    Create an initial split with 75% used for training and 25% for testing
    Extract your training and testing sets
    Build a 10-fold CV dataset as well

b. Recipe (15)

    Define a formula you want to use to predict logQmean
    Describe in words why you are choosing the formula you are. Consult the downloaded PDF for the data to help you make this decision.
    Build a recipe that you feel handles the predictors chosen well

c. Define 3 models (25)

    Define a random forest model using the rand_forest function
    Set the engine to ranger and the mode to regression
    Define two other models of your choice

d. workflowset ()

With your preprocessing steps and models defined, you can now build a workflow_set object to fit and evaluate your models. This will allow you to compare the performance of different models on the same data.

    Create a workflow object
    Add the recipe
    Add the model(s)
    Fit the model to the resamples

e. Evaluation

    Use autoplot and rank_results to compare the models.
    Describe what model you think is best and why!

f. Tune the best model

    Use the tune_grid function to tune at least one of the model hyperparameters
    Use show_best to find the best hyperparameter values for the metric of your choic
    Use a workflow to fit your final, tuned, model

g. Look at VIP

    Use the vip::vip package to visualize the variable importance of your final model
    Describe what you think of the results and if they make sense
    If the model you elect cant provide VIP, instead discuss the pros and cons of a less interpretable model

h. Extact and Evaluate

    Use augment to make predictions on the test data
    Use metrics to evaluate the model performance on the test data
    Create a plot of the observed vs predicted values with clear title, axis labels, and a compelling color scale
    Describe what you think of the results!


